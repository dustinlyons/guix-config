#+TITLE: Workstation
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)
#+PROPERTY: header-args:conf :tangle-mode (identity #o555)
#+STARTUP: content

* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:CONTENTS:
:END:

* Introduction

** What is this?

My entire operating system configuration (guix) with all of my dotfiles defined in Scheme.

** Why?

Reproducible, determinstic builds and our ability to simply declare the state of things has matured so much I had to give this experiment a try. With everything defined in this way, without pulling my hair out I can treat my system as one program, instead of a scattering of dependencies that don't know about each other.

Moreover, every change to my system is now deployed from the [[guix store][guix store]] thanks to [[guix home][guix home]]. This means I get rollbacks, transactional upgrades, fine-grained profiles, and other guix goodness for free.

Other advantages: theming now becomes easier. It's all here, and I can define one set of colors to be used literally everywhere.

** Okay, I'm intrigured. Anything else?

This file is very large, don't be alarmed. In my editor code sections fold by default, so if you're reading this in code, maybe try reading the rendered org version. The dotfiles, shell scripts, etc. you see below get tangled in later. (see [[org-babel][org-babel]] for more info on tangling)

** Thank you 

*** System Crafters

Thank you [[https://github.com/daviwil][David Wilson]], your incredible video series on Emacs, Guix, and your sample configurations brought me down this journey.

If you want a crash course into these tools, check out his [[https://www.youtube.com/c/SystemCrafters][YouTube series]].

* Channels

Guix manages package definitions through [[https://guix.gnu.org/manual/en/html_node/Channels.html#Channels][channels]]. As Guix strongly respects the [[https://www.gnu.org/distros/free-system-distribution-guidelines.html][freedom of computer users]], in order to download non-free software one must include non-free channels. I include one of these below (~nongnu)~, in addition to the default Guix channel definition.

#+NAME: channels
#+BEGIN_SRC scheme :tangle build/channels.scm
(list (channel
        (name 'guix)
        (url "https://git.savannah.gnu.org/git/guix.git")
        (introduction
          (make-channel-introduction
            "9edb3f66fd807b096b48283debdcddccfea34bad"
            (openpgp-fingerprint
              "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
      (channel
        (name 'nonguix)
        (url "https://gitlab.com/nonguix/nonguix")
        (introduction
          (make-channel-introduction
            "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
            (openpgp-fingerprint
              "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5")))))
#+END_SRC

* Operating System Definition 

  I build up my system configurations using [[https://orgmode.org/manual/Extracting-Source-Code.html][noweb]] style syntax. This enables us to write a base operating system available to be inherited by concrete system definitions (laptops, desktops, servers).

** Dependencies

Define all dependencies we need to to build the base definition.
   
#+NAME: base-definition 
#+BEGIN_SRC scheme :tangle build/workstation.scm
(define-module (workstation)
  #:use-module (gnu)
  #:use-module (gnu packages)
  #:use-module (gnu system)
  #:use-module (gnu system nss)
  #:use-module (nongnu system linux-initrd)
  #:use-module (nongnu packages linux)
  #:use-module (guix transformations)
  #:use-module (gnu packages base)
  #:use-module (gnu packages xorg)
  #:use-module (gnu services xorg)
  #:use-module (gnu packages file-systems)
  #:use-module (gnu packages shells)
  #:use-module (gnu packages certs)
  #:use-module (gnu services networking)
  #:use-module (gnu services desktop)
  #:use-module (gnu services ssh))
#+END_SRC

** Keyboard and Mouse

Prepare some rules, config to be used in base operating system definition. This is common across all machines, so I keep this here. All changes get propogated everywhere.

*** libinput

 Use =libinput= driver for all input devices as it provides more optionality.

#+NAME: base-definition-config
#+BEGIN_SRC scheme :tangle build/workstation.scm
;; @todo: Move this to where it is used in slim-service-type
(define %xorg-libinput-config
  "Section \"InputClass\"
    Identifier \"Touchpads\"
    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsTouchpad \"on\"

    Option \"Tapping\" \"on\"
    Option \"TappingDrag\" \"on\"
    Option \"DisableWhileTyping\" \"on\"
    Option \"MiddleEmulation\" \"on\"
    Option \"ScrollMethod\" \"twofinger\"
  EndSection

  Section \"InputClass\"
    Identifier \"Keyboards\"
    Driver \"libinput\"
    MatchDevicePath \"/dev/input/event*\"
    MatchIsKeyboard \"on\"
  EndSection")
#+end_src

** Base Definition

Now that we've prepped module definitions and labeled values to be used in our base operating system, let's define it. All systems inherit from this defintion, both servers and workstations.

#+NAME: base-definition
#+BEGIN_SRC scheme :tangle build/workstation.scm
;; Base Operating System
(define-public base-operating-system
  (operating-system
    (host-name "workstation")
    (locale "en_US.utf8")
    (timezone "America/Kentucky/Louisville")
    (keyboard-layout (keyboard-layout "us"))

#+END_SRC

** Kernel

Linux-lts kernel is chosen as the nvidia-driver in the nonfree channel was compiled against it. In the future I'd like to move away from lts to get more frequent patches.

#+NAME: kernel 
#+BEGIN_SRC scheme :tangle build/workstation.scm
  (kernel linux-lts)
  (firmware (list linux-firmware))

#+END_SRC

** File Systems
*** Boot Loader

Define GRUB as the bootloader for all machines and insert an empty filesystem to be overridden by derivative machines.

#+NAME: file-systems-boot-loader 
#+BEGIN_SRC scheme :tangle build/workstation.scm
  ;; Boot settings (UEFI)
  (bootloader
    (bootloader-configuration
      (bootloader grub-efi-bootloader)
      (targets (list "/boot/efi"))
      (keyboard-layout keyboard-layout)))

#+END_SRC

*** Template Stub

Stub out an empty filesystem to be overriden later. Guix complains otherwise.

#+NAME: file-systems-stub
#+BEGIN_SRC scheme :tangle build/workstation.scm
  (file-systems (cons*
                 (file-system
                   (mount-point "/tmp")
                   (device "none")
                   (type "tmpfs")
                   (check? #f))
                 %base-file-systems))))
#+END_SRC

** X Window System Components

These components and their respective dotfiles are shared across all workstations.

*** Status Bar
**** Polybar

I use polybar to provide a minimal amount of data in a status bar. Date, time, and a watch over CPU, RAM, and Network.

***** guix packages

#+BEGIN_SRC scheme :noweb-ref packages-manifest :noweb-sep ""
  "polybar"
#+END_SRC

***** dotfiles
****** manifest

#+BEGIN_SRC scheme :noweb-ref dotfiles-manifest :noweb-sep ""
  "polybar/colors.ini"
  "polybar/bars.ini"
  "polybar/modules.ini"
  "polybar/config.ini"
#+END_SRC

****** polybar/colors.ini

Color definitions for various modules. @todo: pull this from my global color definition.
#+NAME: polybar-colors
#+BEGIN_SRC conf :visiblity folded :tangle build/polybar/colors.ini
;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
[color]
background = #1F2528
background-alt = #000000
foreground = #FFFFFF
foreground-alt = #FDF6E3
primary = #FAC863
white = #FFFFFF
black = #000000
red = #EC5F67
purple = #C594C5
blue = #6699CC
cyan = #5FB3B3
teal = #5FB3B3
green = #99C794
yellow = #FAC863
pink = #EC6798
lime = #B9C244
amber = #EDB83F
orange = #E57C46
brown = #AC8476
gray = #1F2528
indigo = #6C77BB
blue-gray = #5FB3B3
;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

#+END_SRC

****** polybar/bars.ini
Define bars and visual elements.
#+NAME: polybar-bars
#+BEGIN_SRC conf :visiblity folded :tangle build/polybar/bars.ini
;; Bar settings

[bar]
fill = ⏽
empty = ⏽
indicator = ⏽

;; Module settings

[module/volume]
type = internal/alsa

; Soundcard to be used
; Usually in the format hw:# where # is the card number
; You can find the different card numbers in `/proc/asound/cards`
master-soundcard = default
speaker-soundcard = default
headphone-soundcard = default

; Name of the master, speaker and headphone mixers
; Use the following command to list available mixer controls:
; $ amixer scontrols | sed -nr "s/.*'([[:alnum:]]+)'.*/\1/p"
; If master, speaker or headphone-soundcard isn't the default, 
; use `amixer -c # scontrols` instead where # is the number 
; of the master, speaker or headphone soundcard respectively
;
; Default: Master
master-mixer = Master

; Optionally define speaker and headphone mixers
; Default: none
;;speaker-mixer = Speaker
; Default: none
;;headphone-mixer = Headphone

; NOTE: This is required if headphone_mixer is defined
; Default: none
;;headphone-id = 9

; Use volume mapping (similar to amixer -M and alsamixer), where the increase in volume is linear to the ear
; Default: false
;;mapped = true

; Interval for volume increase/decrease (in percent points)
interval = 5
format-volume = <bar-volume>
format-volume-prefix = 
format-volume-prefix-padding = 1
format-volume-prefix-background = ${color.blue}
format-volume-prefix-foreground = ${color.foreground}
format-volume-background = ${color.background-alt}
format-volume-foreground = ${color.foreground}
format-volume-overline = ${color.background}
format-volume-underline = ${color.background}
format-muted = <label-muted>
format-muted-prefix = 
format-muted-prefix-padding = 1
format-muted-prefix-background = ${color.red}
format-muted-overline = ${color.background}
format-muted-underline = ${color.background}
label-volume = %percentage%%
label-volume-background = ${color.background-alt}
label-volume-padding = 1
label-muted = "Off"
label-muted-foreground = ${color.foreground}
label-muted-background = ${color.background-alt}
label-muted-padding = 1

; Only applies if <bar-volume> is used
bar-volume-format = " %fill%%indicator%%empty% "
bar-volume-width = 10
bar-volume-gradient = false
bar-volume-indicator = ${bar.indicator}
bar-volume-indicator-foreground = ${color.foreground}
bar-volume-fill = ${bar.fill}
bar-volume-foreground-0 = ${color.foreground}
bar-volume-foreground-1 = ${color.foreground}
bar-volume-foreground-2 = ${color.foreground}
bar-volume-empty = ${bar.empty}
bar-volume-empty-foreground = ${color.gray}
;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/cpu_bar]
type = internal/cpu

; Seconds to sleep between updates
; Default: 1
interval = 0.5
format = <bar-load><label>
format-prefix = 
format-prefix-padding = 1
format-prefix-background = ${color.teal}
format-prefix-foreground = ${color.foreground}
format-background = ${color.background-alt}
format-foreground = ${color.foreground}
format-overline = ${color.background}
format-underline = ${color.background}

; Available tokens:
;   %percentage% (default) - total cpu load averaged over all cores
;   %percentage-sum% - Cumulative load on all cores
;   %percentage-cores% - load percentage for each core
;   %percentage-core[1-9]% - load percentage for specific core
label = "%percentage%% "

; Only applies if <bar-load> is used
bar-load-format = " %fill%%indicator%%empty% "
bar-load-width = 10
bar-load-gradient = false

bar-load-indicator = ${bar.indicator}
bar-load-indicator-foreground = ${color.foreground}

bar-load-fill = ${bar.fill}
bar-load-foreground-0 = ${color.foreground}
bar-load-foreground-1 = ${color.foreground}
bar-load-foreground-2 = ${color.foreground}

bar-load-empty = ${bar.empty}
bar-load-empty-foreground = ${color.gray}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/memory_bar]
type = internal/memory
interval = 2
format = <bar-used><label>
format-prefix = 
format-prefix-padding = 1
format-prefix-background = ${color.indigo}
format-prefix-foreground = ${color.foreground}
format-background = ${color.background-alt}
format-foreground = ${color.foreground}
format-overline = ${color.background}
format-underline = ${color.background}

; Available tokens:
;   %percentage_used% (default)
;   %percentage_free%
;   %gb_used%
;   %gb_free%
;   %gb_total%
;   %mb_used%
;   %mb_free%
;   %mb_total%
;   %percentage_swap_used%
;   %percentage_swap_free%
;   %mb_swap_total%
;   %mb_swap_free%
;   %mb_swap_used%
;   %gb_swap_total%
;   %gb_swap_free%
;   %gb_swap_used%

label = "%mb_used% "

; Only applies if <bar-used> is used
bar-used-format = " %fill%%indicator%%empty% "
bar-used-width = 10
bar-used-gradient = false
bar-used-indicator = ${bar.indicator}
bar-used-indicator-foreground = ${color.foreground}
bar-used-fill = ${bar.fill}
bar-used-foreground-0 = ${color.foreground}
bar-used-foreground-1 = ${color.foreground}
bar-used-foreground-2 = ${color.foreground}
bar-used-empty = ${bar.empty}
bar-used-empty-foreground = ${color.gray}

#+END_SRC

****** polybar/modules.ini
Define modules and their functionality.
#+NAME: polybar-modules
#+BEGIN_SRC conf :visiblity folded :tangle build/polybar/modules.ini
;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/alsa]
type = internal/alsa

; Soundcard to be used
; Usually in the format hw:# where # is the card number
; You can find the different card numbers in `/proc/asound/cards`
master-soundcard = default
speaker-soundcard = default
headphone-soundcard = default

; Name of the master, speaker and headphone mixers
; Use the following command to list available mixer controls:
; $ amixer scontrols | sed -nr "s/.*'([[:alnum:]]+)'.*/\1/p"
; If master, speaker or headphone-soundcard isn't the default, 
; use `amixer -c # scontrols` instead where # is the number 
; of the master, speaker or headphone soundcard respectively
;
; Default: Master
master-mixer = Master

; Default: none
;;headphone-id = 9

; Use volume mapping (similar to amixer -M and alsamixer), where the increase in volume is linear to the ear
; Default: false
;;mapped = true

; Interval for volume increase/decrease (in percent points)
; Default: 5
interval = 5

; Available tags:
;   <label-volume> (default)
;   <ramp-volume>
;   <bar-volume>
format-volume = <ramp-volume><label-volume>
format-volume-overline = ${color.background}
format-volume-underline = ${color.background}

; Available tags:
;   <label-muted> (default)
;   <ramp-volume>
;   <bar-volume>
format-muted = <label-muted>
format-muted-prefix = 
format-muted-prefix-background = ${color.red}
format-muted-prefix-padding = 1
format-muted-overline = ${color.background}
format-muted-underline = ${color.background}

; Available tokens:
;   %percentage% (default)
label-volume = %percentage%%
label-volume-background = ${color.background-alt}
label-volume-padding = 1

; Available tokens:
;   %percentage% (default
label-muted = "Off"
label-muted-foreground = ${color.foreground}
label-muted-background = ${color.background-alt}
label-muted-padding = 1

ramp-volume-0 = 
ramp-volume-1 = 
ramp-volume-2 = 
ramp-volume-background = ${color.blue}
ramp-volume-padding = 1

; If defined, it will replace <ramp-volume> when
; headphones are plugged in to `headphone_control_numid`
; If undefined, <ramp-volume> will be used for both
; Only applies if <ramp-volume> is used
ramp-headphones-0 = 
ramp-headphones-background = ${color.blue}
ramp-headphones-padding = 1

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/cpu]
type = internal/cpu

; Seconds to sleep between updates
; Default: 1
interval = 1

; Available tags:
;   <label> (default)
;   <bar-load>
;   <ramp-load>
;   <ramp-coreload>
format = <label>
format-prefix = 
format-prefix-background = ${color.brown}
format-prefix-padding = 1
format-overline = ${color.background}
format-underline = ${color.background}

; Available tokens:
;   %percentage% (default) - total cpu load averaged over all cores
;   %percentage-sum% - Cumulative load on all cores
;   %percentage-cores% - load percentage for each core
;   %percentage-core[1-9]% - load percentage for specific core
label = "%percentage%%"
label-background = ${color.background-alt}
label-padding = 1

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/date]
type = internal/date

; Seconds to sleep between updates
interval = 1.0
time = "%I:%M"
time-alt = "%a, %d %b %Y"

; Available tags:
;   <label> (default)
format = <label>
format-prefix = 
format-prefix-background = ${color.blue}
format-prefix-padding = 1
format-overline = ${color.background}
format-underline = ${color.background}

; Available tokens:
;   %date%
;   %time%
; Default: %date%
label = %time%
label-background = ${color.background-alt}
label-padding = 1

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/memory]
type = internal/memory

; Seconds to sleep between updates
; Default: 1
interval = 1

; Available tags:
;   <label> (default)
;   <bar-used>
;   <bar-free>
;   <ramp-used>
;   <ramp-free>
;   <bar-swap-used>
;   <bar-swap-free>
;   <ramp-swap-used>
;   <ramp-swap-free>
format = <label>
format-prefix = 
format-prefix-background = ${color.brown}
format-prefix-padding = 1
format-overline = ${color.background}
format-underline = ${color.background}

; Available tokens:
;   %percentage_used% (default)
;   %percentage_free%
;   %gb_used%
;   %gb_free%
;   %gb_total%
;   %mb_used%
;   %mb_free%
;   %mb_total%
;   %percentage_swap_used%
;   %percentage_swap_free%
;   %mb_swap_total%
;   %mb_swap_free%
;   %mb_swap_used%
;   %gb_swap_total%
;   %gb_swap_free%
;   %gb_swap_used%

label = "%mb_used%"
label-background = ${color.background-alt}
label-padding = 1

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

; Normal Module
[module/network]
type = internal/network
interface = eno1

; Seconds to sleep between updates
; Default: 1
interval = 1.0

; Accumulate values from all interfaces
; when querying for up/downspeed rate
; Default: false
accumulate-stats = true

; Consider an `UNKNOWN` interface state as up.
; Some devices have an unknown state, even when they're running
; Default: false
unknown-as-up = false

; Available tags:
;   <label-connected> (default)
;   <ramp-signal>
format-connected = <label-connected>
format-connected-prefix = 
format-connected-prefix-background = ${color.brown}
format-connected-prefix-padding = 1
format-connected-overline = ${color.background}
format-connected-underline = ${color.background}

; Available tags:
;   <label-disconnected> (default)
format-disconnected = <label-disconnected>
format-disconnected-prefix = 
format-disconnected-prefix-background = ${color.orange}
format-disconnected-prefix-padding = 1
format-disconnected-overline = ${color.background}
format-disconnected-underline = ${color.background}

; Available tags:
;   <label-connected> (default)
;   <label-packetloss>
;   <animation-packetloss>
;;format-packetloss = <animation-packetloss> <label-connected>

; Available tokens:
;   %ifname%    [wireless+wired]
;   %local_ip%  [wireless+wired]
;   %local_ip6% [wireless+wired]
;   %essid%     [wireless]
;   %signal%    [wireless]
;   %upspeed%   [wireless+wired]
;   %downspeed% [wireless+wired]
;   %linkspeed% [wired]
; Default: %ifname% %local_ip%
label-connected = "%{A1:networkmanager_dmenu &:}%downspeed%%{A}"
label-connected-background = ${color.background-alt}
label-connected-padding = 1

; Available tokens:
;   %ifname%    [wireless+wired]
; Default: (none)
label-disconnected = "%{A1:networkmanager_dmenu &:}Offline%{A}"
label-disconnected-background = ${color.background-alt}
label-disconnected-padding = 1

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/workspaces]
type = internal/xworkspaces

; Only show workspaces defined on the same output as the bar
;
; Useful if you want to show monitor specific workspaces
; on different bars
;
; Default: false
pin-workspaces = true

; Create click handler used to focus desktop
; Default: true
enable-click = true

; Create scroll handlers used to cycle desktops
; Default: true
enable-scroll = true

; icon-[0-9]+ = <desktop-name>;<icon>
; NOTE: The desktop name needs to match the name configured by the WM
; You can get a list of the defined desktops using:
; $ xprop -root _NET_DESKTOP_NAMES
icon-0 = 1;
icon-1 = 2;
icon-2 = 3;
icon-3 = 4;
icon-4 = 5;
icon-default = 

; Available tags:
;   <label-monitor>
;   <label-state> - gets replaced with <label-(active|urgent|occupied|empty)>
; Default: <label-state>
format = <label-state>
format-overline = ${color.background}
format-underline = ${color.background}

; Available tokens:
;   %name%
label-monitor = %name%

; Available tokens:
;   %name%
;   %icon%
;   %index%
label-active = %icon%
label-active-foreground = ${color.foreground}
label-active-background = ${color.primary}

; Available tokens:
;   %name%
;   %icon%
;   %index%
label-occupied = %icon%
label-occupied-foreground = ${color.foreground}
label-occupied-background = ${color.gray}

; Available tokens:
;   %name%
;   %icon%
;   %index%
label-urgent = %icon%
label-urgent-foreground = ${color.foreground}
label-urgent-background = ${color.red}

; Available tokens:
;   %name%
;   %icon%
;   %index%
label-empty = %icon%
label-empty-foreground = ${color.foreground}
label-empty-background = ${color.background-alt}

label-active-padding = 1
label-urgent-padding = 1
label-occupied-padding = 1
label-empty-padding = 1

[module/sep]
type = custom/text
content = |

content-background = ${color.background}
content-foreground = ${color.background}

#+END_SRC

****** polybar/config.ini
Main script for polybar.

#+NAME: polybar-confiid
#+BEGIN_SRC conf :visiblity folded :tangle build/polybar/config.ini
;; Global WM Settings

[global/wm]
margin-bottom = 0
margin-top = 0

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

include-file = ./bars.ini
include-file = ./colors.ini
include-file = ./modules.ini

;; Bar Settings

[bar/main]
monitor-strict = false
override-redirect = false
bottom = false
fixed-center = true
width = 100%
height = 34
background = ${color.background}
foreground = ${color.foreground}
line-size = 5
line-color = ${color.background}
border-bottom-size = 0
border-bottom-color = ${color.primary}
padding = 0
module-margin-left = 0
module-margin-right = 0
font-0 = "Helvetica LT Std:size=12;4"
font-1 = "FontAwesome:size=12;3"
enable-ipc = true

modules-left = sep workspaces sep memory sep cpu sep network
modules-right = sep alsa sep date

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

; Opacity value between 0.0 and 1.0 used on fade in/out
dim-value = 1.0

; Set a DPI values used when rendering text
; This only affects scalable fonts
; dpi = 

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

;; Application Settings

[settings]
; The throttle settings lets the eventloop swallow up til X events
; if they happen within Y millisecond after first event was received.
; This is done to prevent flood of update event.
throttle-output = 5
throttle-output-for = 10
screenchange-reload = false

; Compositing operators
; https://www.cairographics.org/manual/cairo-cairo-t.html#cairo-operator-t
compositing-background = source
compositing-foreground = over
compositing-overline = over
compositing-underline = over
compositing-border = over

#+END_SRC

* Export Packages and Dotfiles

#+begin_src scheme :tangle build/dl/packages.scm :noweb yes
(define-module (dl packages)
  #:export (%dl-packages))

(define %dl-packages
  (list
  <<packages-manifest>>
))
#+end_src

#+begin_src scheme :tangle build/dl/dotfiles.scm :noweb yes
(define-module (dl dotfiles)
  #:export (%dl-dotfiles))

(define %dl-dotfiles
  (list
  <<dotfiles-manifest>>
))
#+end_src
