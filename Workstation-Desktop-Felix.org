#+TITLE: Workstation - Felix
#+STARTUP: content
#+PROPERTY: header-args :tangle-mode (identity #o444) :mkdirp yes
#+PROPERTY: header-args :tangle-mode (identity #o555)

* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:CONTENTS:
:END:

* Dependencies

#+NAME: dependencies
#+BEGIN_SRC scheme  :tangle build/felix.scm
(add-to-load-path (dirname (current-filename)))
(use-modules (gnu home)
             (gnu home-services)
             (gnu home-services shells)
             (gnu services)
             (gnu packages)
             (guix build utils)
             (guix monads)
             (gnu packages admin)
             (dl utils)
             (guix gexp))
#+END_SRC

* Utility Functions

This function takes the various dotfiles manifests I have defined in my literate configuration and maps them to real files managed by guix home.

#+NAME: dependencies
#+BEGIN_SRC scheme  :tangle build/felix.scm
;; Returns a list of home-file-service structs for each dotfile
(define (dl/generate-dotfiles-services dotfiles)
  (if (null? dotfiles)
    '()
  (let ((config-file (string-append "config/" (car dotfiles)))
        (build-file (string-append "build/" (car dotfiles))))
    (cons
      (simple-service 'load-build-files
        home-files-service-type
          (list ;; pair of destination path and source path
            `(,config-file
            ,(local-file build-file "config"))))
      (dl/generate-dotfiles-services (cdr dotfiles))))))
#+END_SRC

* Home Environment Definition

Here we load most of the software and it's respective configuration I use day-to-day. The list of packages is compiled from the various 'guix-packages' sections found throughout this file and others.

Dotfiles (i.e configuration files) are installed by Guix Home.

Please note: Guix Home defines "services" below, not as Shepherd services, like GuixSD does, but as plugins to perform a build action on your home environment. Do not get them confused.

#+name: profiles
#+begin_src scheme  :tangle build/felix.scm
(home-environment
  (packages (map specification->package+output %dl-packages))
  (services (append (list
#+end_src

** Services

*** Keyboard
Map CAPS LOCK to Control key.
**** manifest
#+BEGIN_SRC scheme :noweb-ref dotfiles-manifest :noweb-sep ""
  ".Xmodmap"
#+END_SRC
**** dotfiles
***** Xmodmap

#+NAME: home-services-keyboard
#+BEGIN_SRC conf :visiblity folded :tangle build/.Xmodmap
clear lock
clear control
keycode 66 = Control_L
add control = Control_L Control_R
#+END_SRC

*** Bash
I use Oh-My-Bash! for terminal colors, no plugins or other aliases.

#+NAME: home-services-bash
#+BEGIN_SRC scheme  :tangle build/felix.scm
(service home-bash-service-type
        (home-bash-configuration
          (guix-defaults? #f)
          (bashrc '("# Export 'SHELL' to child processes.  
# Programs such as 'screen' honor it and otherwise use /bin/sh.
export SHELL

# Export 'GUIX_PROFILE'. Sources all guix package environment variables,
# for example,if we install python and Python libraries, PYTHONPATH
# will be defined.
export GUIX_PROFILE=\"$HOME/.guix-profile\"
    
# Few other useful exports
export LANG=en_US.UTF-8
export LIBGL_ALWAYS_INDIRECT=1 # Silenced a few warnings, otherwise not sure

# We are being invoked from a non-interactive shell.  If this
# is an SSH session (as in \"ssh host command\"), source
# /etc/profile so we get PATH and other essential variables.
if [[ $- != *i* ]]
then
[[ -n \"$SSH_CLIENT\" ]] && source \"$GUIX_PROFILE/etc/profile\"
    
# Don't do anything else.
return
fi

# Aliases we like
alias ls='ls --color'
    
# Source system-wide configuration
# i.e run everything in these files
source /etc/bashrc
source \"$GUIX_PROFILE/etc/profile\"
    
# oh-my-BASH!
# https://ohmybash.nntoan.com/
export OSH=$HOME/Resources/code/oh-my-bash
export OSH_THEME=\"agnoster\"
export HYPEN_INSENSITIVE=\"true\"
export COMPLETION_WAITING_DOTS=\"true\"
source $OSH/oh-my-bash.sh
# ~~*~-~*~-~*~~*~-~*~-~*~~*~-~*~-~*~~*~-~*~-~*~**~~*~-~*~-~*~")))))
#+END_SRC

*** Dotfiles

This function takes the various dotfiles manifests I have defined in my literate configuration and maps them to real files managed by guix home.

#+NAME: home-services
#+BEGIN_SRC scheme  :tangle build/felix.scm :noweb yes
;; Generates home-files-services for each dotfile defined
;; throughout configuration inheritance
(dl/generate-dotfiles-services
  (append '(<<dotfiles-manifest>>) %dl-dotfiles)))))
#+END_SRC
