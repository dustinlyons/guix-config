#+TITLE: Workstation - Desktop - Felix
#+STARTUP: content
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args :tangle-mode (identity #o444)
#+PROPERTY: header-args :tangle-mode (identity #o555)

* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:CONTENTS:

:END:

* Operating System
This machine sits on my desk at home, so define and name a new Desktop Operating System.

#+NAME: desktop-operating-system
#+BEGIN_SRC scheme  :tangle build/felix-os.scm
(define-module (felix-os)
  #:use-module (desktop)
  #:use-module (gnu services)
  #:use-module (gnu system)
  #:use-module (gnu packages))

(operating-system
 (inherit desktop-operating-system)
 (host-name "felix"))
#+END_SRC

* Home Environment
Here we load most of the software and it's respective configuration I use day-to-day. The list of packages is compiled from the various 'guix-packages' sections found throughout this file and others.

Dotfiles (i.e configuration files) are installed by Guix Home.

Please note: Guix Home defines "services" below, not as Shepherd services, like Guix Linux does, but as plugins to perform a build action on your home environment. Do not get them confused.

** Dependencies

#+NAME: dependencies
#+BEGIN_SRC scheme  :tangle build/felix-home.scm

(define-module (felix-home)
  #:use-module (gnu home)
  #:use-module (desktop)
  #:use-module (dl utils)
  #:use-module (gnu home services)
  #:use-module (gnu home services shells)
  #:use-module (gnu )
  #:use-module (gnu services)
  #:use-module (gnu system)
  #:use-module (gnu packages)
  #:use-module (guix build utils)
  #:use-module (gnu packages admin)
  #:use-module (guix gexp))

#+END_SRC

** Utility Functions

This function takes the various dotfiles manifests I have defined in my literate configuration and maps them to real files managed by guix home.

#+NAME: dependencies
#+BEGIN_SRC scheme  :tangle build/felix-home.scm

;; Returns a list of home-file-service structs for each dotfile
(define (generate-dotfiles-services dotfiles)
  (if (null? dotfiles)
    '()
  (let ((config-file (string-append "config/" (car dotfiles)))
        (build-file (string-append "build/" (car dotfiles))))
    (cons
      (simple-service 'load-build-files
        home-files-service-type
          (list ;; pair of destination path and source path
            `(,config-file
            ,(local-file build-file "config"))))
      (generate-dotfiles-services (cdr dotfiles))))))
#+END_SRC

** Packages

#+name: home-environment-base 
#+BEGIN_SRC scheme  :tangle build/felix-home.scm
(home-environment
  (packages (map specification->package+output %dl-packages))
  (services
    (append (list
      (service home-bash-service-type
        (home-bash-configuration
          (guix-defaults? #t)
          (bashrc (list
            (local-file "bash/bashrc.sh"))))))
      (generate-dotfiles-services %dl-dotfiles))))
#+END_SRC

** Services

*** Bash

I use Oh-My-Bash! for terminal colors, no plugins or other aliases.

#+NAME: home-services-bash
#+BEGIN_SRC sh  :tangle build/bash/bashrc.sh
# Export 'SHELL' to child processes.
# Programs such as 'screen' honor it and otherwise use /bin/sh.
export SHELL
export LIBGL_ALWAYS_INDIRECT=1
export LANG=en_US.UTF-8
alias ls='ls --color'

# We are being invoked from a non-interactive shell.  If this
# is an SSH session (as in \"ssh host command\"), source
# /etc/profile so we get PATH and other essential variables.
if [[ $- != *i* ]]
then
[[ -n \"$SSH_CLIENT\" ]] && source \"$GUIX_PROFILE/etc/profile\"

# Don't do anything else.
return
fi

# System wide configuration
source /etc/bashrc

# oh-my-BASH!
export OSH=$HOME/Resources/code/oh-my-bash
source $OSH/oh-my-bash.sh")))) %my-services)))
#+END_SRC

*** Keyboard

Map CAPS LOCK to Control key.

***** Dotfiles Manifest

#+BEGIN_SRC scheme :noweb-ref dotfiles-manifest :noweb-sep ""
  ".Xmodmap"
#+END_SRC

***** Dotfiles
****** .Xmodmap

#+NAME: home-services-keyboard
#+BEGIN_SRC conf :tangle build/.Xmodmap
clear lock
clear control
keycode 66 = Control_L
add control = Control_L Control_R
#+END_SRC
