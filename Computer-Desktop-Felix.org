#+TITLE: Computer - Desktop - Felix Definition
#+STARTUP: content
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)
#+PROPERTY: header-args:conf :tangle-mode (identity #o555)

* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:CONTENTS:
- [[#operating-system][Operating System]]
- [[#home-environment][Home Environment]]
  - [[#dependencies--setup][Dependencies & Setup]]
    - [[#initialize][Initialize]]
      - [[#initialize][Initialize]]
      - [[#activate][Activate]]
  - [[#services][Services]]
    - [[#bash][Bash]]
      - [[#initialize][Initialize]]
      - [[#bash-profile][Bash Profile]]
    - [[#keyboard][Keyboard]]
      - [[#dotfiles-manifest][Dotfiles Manifest]]
      - [[#dotfiles][Dotfiles]]
        - [[#xmodmap][.Xmodmap]]
  - [[#home-environment][Home Environment]]
    - [[#definition][Definition]]
    - [[#export][Export]]
:END:

* Operating System

This machine sits on my desk at home, so define and name a new Desktop Operating System.

#+NAME: desktop-operating-system
#+BEGIN_SRC scheme  :tangle build/felix-os.scm
(define-module (felix-os)
  #:use-module (desktop)
  #:use-module (gnu services)
  #:use-module (gnu system)
  #:use-module (gnu packages))

(operating-system
 (inherit desktop-operating-system)
 (host-name "felix"))
#+END_SRC

* Home Environment

Here we load most of the software and it's respective configuration I use day-to-day. The list of packages is compiled from the various 'guix-packages' sections found throughout this file and others.

Dotfiles (i.e configuration files) are installed by Guix Home.

Please note: Guix Home defines "services" below, not as Shepherd services, like Guix Linux does, but as plugins to perform a build action on your home environment. Do not get them confused.

** Dependencies & Setup

#+NAME: dependencies
#+BEGIN_SRC scheme  :tangle build/felix-home.scm
(define-module (felix-home)
  #:use-module (gnu home)
  #:use-module (desktop)
  #:use-module (dl utils)
  #:use-module (gnu home services)
  #:use-module (gnu home services shells)
  #:use-module (gnu services)
  #:use-module (gnu system)
  #:use-module (gnu packages)
  #:use-module (guix build utils)
  #:use-module (gnu packages admin)
  #:use-module (guix gexp))
#+END_SRC

We setup some scripts to be used throughout this file that are woven together as part of Makefile.

*** Initialize
**** Initialize

Initialize our bash script that runs as part of each first install.

#+BEGIN_SRC sh :noweb-ref initialize-shell-script :noweb-sep ""
# This script created from Computer-Desktop-Felix.org
GREEN_TERMINAL_OUTPUT='\033[1;32m'
CLEAR='\033[0m'

#+END_SRC

**** Activate

Initialize our bash script that runs as part of each activation.

#+BEGIN_SRC sh :noweb-ref activate-shell-script :noweb-sep ""
# This script created from Computer-Desktop-Felix.org
GREEN_TERMINAL_OUTPUT='\033[1;32m'
CLEAR='\033[0m'

#+END_SRC


** Services

*** Bash

**** Initialize

This runs after bash is installed for the first time. I use Oh-My-Bash! for terminal colors, no plugins or other aliases.

#+BEGIN_SRC sh :noweb-ref initialize-shell-script :noweb-sep ""
# Clone Oh-My-Bash! for the themes
echo -e "${GREEN_TERMINAL_OUTPUT}--> [Bash] Downloading oh-my-bash...${CLEAR}"
git clone https://github.com/ohmybash/oh-my-bash.git ~/.config/oh-my-bash && \
    echo -e "${GREEN_TERMINAL_OUTPUT}--> [Bash] Download successful.${CLEAR}"

#+END_SRC

**** Bash Profile

#+NAME: home-services-bash
#+BEGIN_SRC sh  :tangle build/bash/bashrc.sh
# Export 'SHELL' to child processes.
# Programs such as 'screen' honor it and otherwise use /bin/sh.
export SHELL
export LANG=en_US.UTF-8
export OSH="$HOME/.config/oh-my-bash"
export OSH_THEME="agnoster"
export PATH=$PATH:/home/dustin/bin
export LIBGL_ALWAYS_INDIRECT=1
export GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles
alias ls='ls --color'
alias open='thunar'

# We are being invoked from a non-interactive shell.  If this
# is an SSH session (as in \"ssh host command\"), source
# /etc/profile so we get PATH and other essential variables.
if [[ $- != *i* ]]
then
[[ -n "$SSH_CLIENT" ]] && source "$GUIX_PROFILE/etc/profile"

# Don't do anything else.
return
fi

# Load all Guix profiles
for i in $GUIX_EXTRA_PROFILES/*; do
  profile=$i/$(basename "$i")
  if [ -f "$profile"/etc/profile ]; then
    GUIX_PROFILE="$profile"
    . "$GUIX_PROFILE"/etc/profile
  fi
  unset profile
done

# System wide configuration and oh-my-BASH!
source /etc/bashrc
source $OSH/oh-my-bash.sh
#+END_SRC

*** Keyboard

Map CAPS LOCK to Control key.

***** Dotfiles Manifest

#+NAME: keyboard-dotfiles-manifest
#+BEGIN_SRC scheme :noweb-ref dotfiles-manifest :noweb-sep ""
  ".Xmodmap"
#+END_SRC

***** Dotfiles
****** .Xmodmap

#+NAME: home-services-keyboard
#+BEGIN_SRC conf :tangle build/.Xmodmap
clear lock
clear control
keycode 66 = Control_L
add control = Control_L Control_R
#+END_SRC


** Home Environment

The function below takes the various dotfiles manifests I have defined in my literate configuration and maps them to real files managed by guix home.

*** Definition 

#+NAME: home-environment-definition
#+BEGIN_SRC scheme  :tangle build/felix-home.scm :noweb yes
;; Returns a list of home-file-service structs for each dotfile
(define (generate-dotfiles-services dotfiles)
  (if (null? dotfiles)
    '()
  (let ((config-file (string-append "config/" (car dotfiles)))
        (build-file (string-append "build/" (car dotfiles))))
    (cons
      (simple-service 'load-build-files
        home-files-service-type
          (list ;; pair of destination path and source path
            `(,config-file
            ,(local-file build-file "config"))))
      (generate-dotfiles-services (cdr dotfiles))))))

(home-environment
  (packages (map specification->package+output %dl-packages))
  (services
    (append (list
      (service home-bash-service-type
        (home-bash-configuration
          (guix-defaults? #t)
          (bashrc (list
            (local-file "bash/bashrc.sh"))))))
      (generate-dotfiles-services (append '(<<dotfiles-manifest>>) %dl-dotfiles)))))
#+END_SRC

*** Export
These are activation and initialization scripts, built from tangled sections in this file. Check out the Makefile to see how they are used.

#+BEGIN_SRC sh :tangle build/scripts/activate-felix.sh :noweb yes
#!/bin/bash
<<activate-shell-script>>
#+END_SRC

#+BEGIN_SRC sh :tangle build/scripts/initialize-felix.sh :noweb yes
#!/bin/bash
<<initialize-shell-script>>
#+END_SRC
